resources:
  repositories:
    - repository: devops
      type: git
      name: Innovation/DevOps

schedules:
  - cron: 0 23 * * 1-5
    displayName: Daily UI Regression Tests
    branches:
      include:
        - master
    always: true

trigger:
  - master

pool:
  vmImage: ubuntu-latest

stages:
  - stage: "e2etest"
    displayName: "End-to-end Testing: Payment Center"
    jobs:
      - job:
        displayName: "Payment Center"
        steps:
          - task: Cache@2
            inputs:
              key: '"npm" | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
              cacheHitVar: CACHE_RESTORED
            displayName: Cache NPM
          - task: Npm@1
            displayName: NPM Install Dependencies
            inputs:
              command: "install" # Options: install, publish, custom
              verbose: true # Optional

          - task: Npm@1
            displayName: Run Tests
            inputs:
              command: "custom"
              verbose: true
              customCommand: run test:pa:ci

          - task: Npm@1
            displayName: Prepare test results
            condition: always()
            inputs:
              command: "custom"
              verbose: true
              customCommand: run produce:reports

          - task: PublishTestResults@2
            displayName: "Publish test results"
            condition: always()
            continueOnError: true
            inputs:
              testResultsFiles: "results/combined-report.xml"
              searchFolder: '$(System.DefaultWorkingDirectory)'

          - task: ArchiveFiles@2
            displayName: "Archive Results"
            condition: always()
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/results"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/TestReport-$(Build.BuildId).zip"
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Results"
            condition: always()
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "Test Report"
              publishLocation: "Container"


          # - task: PublishPipelineArtifact@1
          #       inputs:
          #       targetPath: '$(Build.SourcesDirectory)/cypress/reports'  # Replace with the actual path to your Cypress HTML report
          #       artifact: 'CypressReport'



          # - task: UseDotNet@2
          #         inputs:
          #         packageType: 'sdk'
          #         installationPath: $(Build.SourcesDirectory)/dotnet
          #         installationVersion: 'latest'
          #         performMultiLevelLookup: true
          #         installationPathUserOverride: $(Build.SourcesDirectory)/.dotnet

          # - task: EmailNotification@11
          #         inputs:
          #         subject: 'Cypress Test Report'
          #         to: 'yurii.slipetskiy@busey.com'  # Replace with the recipient's email address
          #         attachmentsPattern: '**/cypress/reports/index.html'